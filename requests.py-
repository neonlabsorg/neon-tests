import json
import re
from collections import defaultdict
import pandas as pd
from datetime import datetime

# Path to the log file
log_file_path = 'log1.log'

# Regular expression to match the inner JSON log format
log_pattern = re.compile(r'({.*})')

# Initialize dictionaries to store data
method_data = defaultdict(lambda: {"count": 0, "total_time": 0.0, "max_time": 0.0, "timestamps": []})
time_data = defaultdict(int)


# Function to extract the JSON-RPC method from the request body
def extract_method(request_body):
    try:
        request_json = json.loads(request_body)
        return request_json.get("method", "unknown")
    except json.JSONDecodeError:
        return "unknown"


# Read and parse the log file
with open(log_file_path, 'r') as log_file:
    for line in log_file:
        outer_log = json.loads(line)
        match = log_pattern.search(outer_log.get("log", ""))
        if match:
            log_entry = json.loads(match.group(1))
            request_body = log_entry.get("jsonrpc_method", "")
            request_time = float(log_entry.get("request_time", 0))
            method = extract_method(request_body)

            # Update method data
            method_data[method]["count"] += 1
            method_data[method]["total_time"] += request_time
            if request_time > method_data[method]["max_time"]:
                method_data[method]["max_time"] = request_time

            # Update time data for RPS calculation
            timestamp = log_entry.get("@timestamp", "")
            if timestamp:
                time_key = datetime.fromisoformat(timestamp.replace("Z", "+00:00")).strftime('%Y-%m-%d %H:%M:%S')
                time_data[time_key] += 1
                method_data[method]["timestamps"].append(time_key)

# Calculate average time for each method
for method, data in method_data.items():
    if data["count"] > 0:
        data["average_time"] = data["total_time"] / data["count"]
    else:
        data["average_time"] = 0.0

# Calculate total unique seconds
unique_seconds = len(time_data)

# Calculate average RPS for each method and total average RPS
total_requests = sum(data["count"] for data in method_data.values())
total_average_rps = total_requests / unique_seconds if unique_seconds > 0 else 0

for method, data in method_data.items():
    unique_method_seconds = len(set(data["timestamps"]))
    data["average_rps"] = data["count"] / unique_method_seconds if unique_method_seconds > 0 else 0

# Create a DataFrame for method data
df_method = pd.DataFrame.from_dict(method_data, orient='index')
df_method = df_method.rename(columns={
    "count": "Number of Requests",
    "total_time": "Total Time (s)",
    "max_time": "Longest Request Time (s)",
    "average_time": "Average Request Time (s)",
    "average_rps": "Average RPS"
})

# Drop the timestamps column
df_method = df_method.drop(columns=["timestamps"])

# Create a DataFrame for RPS data
df_rps = pd.DataFrame(list(time_data.items()), columns=['Time', 'RPS']).sort_values(by='Time')

# Display the DataFrames
print("JSON-RPC Method Analysis")
print(df_method)
print("\nRequests Per Second (RPS) Analysis")
print(df_rps)
print("\nTotal Average RPS:", total_average_rps)

# Save the DataFrames to CSV files
output_method_file_path = 'rpc_method_analysis.csv'
output_rps_file_path = 'rps_analysis.csv'
df_method.to_csv(output_method_file_path)
df_rps.to_csv(output_rps_file_path)
print(f"Method analysis saved to {output_method_file_path}")
print(f"RPS analysis saved to {output_rps_file_path}")
