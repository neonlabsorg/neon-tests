name: Report reusable
run-name: Report reusable (${{ inputs.network }})

on:
  workflow_call:
    inputs:
        network:
          type: string
          default: terraform
          required: true
          description: "Stand name"
        tests_tag:
          type: string
          required: true
          description: "Tag of the tests"
        faucet_url:
          type: string
          required: true
          description: "faucet_url (fill only for custom stand)"
        pr_url_for_report:
          type: string
          required: true
          description: "Url to send the report as comment for PR"
        proxy_ip:
          type: string
          required: true
        solana_ip:
          type: string
          required: true
        nginx_ip:
          type: string
          required: true
        external_call:
          description: 'To distinguish calls from other repositories and the current one'
          type: boolean
          required: false
          default: false
        repo:
          description: 'To distinguish calls from other repositories and the current one'
          type: string
          required: true
          default: ""
        pr_number:
          description: 'To distinguish calls from other repositories and the current one'
          type: number
          required: true
          default: 0

env:
  NETWORK: ${{ inputs.network }}
  DUMP_ENVS: True
  DEVNET_FAUCET_URL: ${{ secrets.DEVNET_FAUCET_URL }}
  DEVNET_SOLANA_URL: ${{ secrets.SOLANA_URL }}
  NGINX_IP: ${{ inputs.nginx_ip }}

jobs:
  requests-report:
    runs-on: ubuntu-20.04
    if: always()
    env:
      NETWORK: ${{ inputs.network }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
      NEON_TEST_IMAGE: neonlabsorg/neon_tests
      CONTAINER: report-${{ github.run_id }}
      TESTS_TAG: ${{ inputs.tests_tag }}
      NGINX_IP: ${{ inputs.nginx_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: neonlabsorg/neon-tests
          ref: ndev_2475_collect_metrics_for_requests
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
          # Required, if the artifact is from a different repo
          # Required, if the repo is private a Personal Access Token with `repo` scope is needed or GitHub token in a job where the permissions `action` scope set to `read`
          github_token: ${{secrets.GITHUB_TOKEN}}
          # If no workflow is set and workflow_search set to true, then the most recent workflow matching
          # all other criteria will be looked up instead of using the current workflow
          workflow_search: false
          # Optional, will get head commit SHA
          pr: ${{ inputs.pr_number }}
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          # is treated as a regular expression if input name_is_regexp is true
          # will download only those artifacts with a name that matches this regular expression
          # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions
          name: nginx-log
          # Optional, name is treated as a regular expression if set true
          name_is_regexp: false
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          path: extract_here
          # Optional, defaults to current repo
          repo: ${{ inputs.repo }}
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          check_artifacts: false
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: false
          # Optional, choose to skip unpacking the downloaded artifact(s)
          # default false
          skip_unpack: false
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail
          # Optional, include forks when searching for artifacts
          # default false
          allow_forks: true
      - name: "Request report"
        run: |
          python3 ./clickfile.py stats parse_logs