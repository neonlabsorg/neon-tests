name: dApps reusable
run-name: dApps reusable (${{ inputs.dapps }}, ${{ inputs.network }})

on:
  workflow_call:
    inputs:
      network:
        type: string
        default: custom
        required: true
        description: "Stand name"
      dapps:
        type: string
        required: true
        description: "List of dapps separated by commas (if empty, all will be run)"
      proxy_url:
        type: string
        required: true
        description: "proxy_url (fill only for custom stand)"
      solana_url:
        type: string
        required: true
        description: "solana_url (fill only for custom stand)"
      faucet_url:
        type: string
        required: true
        description: "faucet_url (fill only for custom stand)"
      network_id:
        type: string
        required: true
        description: "network_id (fill only for custom stand)"
      pr_url_for_report:
        type: string
        required: true
        description: "Url to send the report as comment for PR"
      proxy_ip:
        type: string
        required: true
      solana_ip:
        type: string
        required: true
      external_call:
        description: 'To distinguish calls from other repositories and the current one'
        type: boolean
        required: false
        default: true
      repo:
        type: string
        description: "Repository type: tests | proxy | evm"
        required: false
      evm_tag:
        type: string
        required: false
        description: "Neon EVM Docker tag"
      evm_sha_tag:
        type: string
        required: false
        description: "Neon EVM GitHub commit SHA"
      proxy_tag:
        type: string
        required: false
        description: "Proxy Docker tag"
      proxy_sha_tag:
        type: string
        required: false
        description: "Proxy GitHub commit SHA"
      proxy_pr_version_branch:
        type: string
        required: false
        description: "Proxy version branch"
      evm_pr_version_branch:
        type: string
        required: false
        description: "Neon EVM version branch"


env:
  NETWORK: ${{ inputs.network }}
  DUMP_ENVS: True
  DEVNET_FAUCET_URL: ${{ secrets.DEVNET_FAUCET_URL }}
  DEVNET_SOLANA_URL: ${{ secrets.SOLANA_URL }}
  TEST_RESULTS_DB_HOST: ${{ secrets.TEST_RESULTS_DB_HOST }}
  TEST_RESULTS_DB_PORT: ${{ secrets.TEST_RESULTS_DB_PORT }}
  TEST_RESULTS_DB_NAME: ${{ secrets.TEST_RESULTS_DB_NAME }}
  TEST_RESULTS_DB_USER: ${{ secrets.TEST_RESULTS_DB_USER }}
  TEST_RESULTS_DB_PASSWORD: ${{ secrets.TEST_RESULTS_DB_PASSWORD }}

jobs:
  uniswap-v2:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'uniswap-v2')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 3 -a 10000 -n ${{env.NETWORK}}

      - name: Launch uniswap v2 tests
        if: ${{ steps.accounts.outcome == 'success' }}
        timeout-minutes: 30
        id: uniswap-v2
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/uniswap-v2:latest
        run: |
          test -t 1 && USE_TTY="-t"
          docker pull ${{ env.IMAGE }}
          docker run -i ${USE_TTY} --name=uniswap-v2-${{ github.run_number }} \
            -e NEON_PROXY_URL=${{ env.PROXY_URL }} \
            -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} \
            -e NEON_CHAIN_ID=${{ env.NETWORK_ID }} \
            --entrypoint /bin/bash ${{ env.IMAGE }} \
            -c "npx hardhat run /usr/src/app/scripts/deploy.ts"
          docker cp uniswap-v2-${{ github.run_number }}:/usr/src/app/report.json uniswap-v2-report.json
      - name: Delete the uniswap container
        if: always() && steps.uniswap-v2.result != 'skipped'
        run: docker rm -f uniswap-v2-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: uniswap-v2-report
          path: uniswap-v2-report.json

  uniswap-v3:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'uniswap-v3')
    env:
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 3 -a 10000 -n ${{env.NETWORK}}

      - name: Launch uniswap v3 tests
        if: ${{ steps.accounts.outcome == 'success'}}
        id: uniswap-v3
        timeout-minutes: 30
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/uniswap-v3:latest
        run: |
          test -t 1 && USE_TTY="-t"
          docker pull ${{ env.IMAGE }}
          docker run -i ${USE_TTY} --name=uniswap-v3-${{ github.run_number }} \
            -e NEON_PROXY_URL=${{ env.PROXY_URL }} \
            -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} \
            -e NEON_CHAIN_ID=${{ env.NETWORK_ID }} \
            ${{ env.IMAGE }}
          docker cp uniswap-v3-${{ github.run_number }}:/usr/src/app/report.json uniswap-v3-report.json
      - name: Delete the uniswap-v3 container
        if: always() && steps.uniswap-v3.result != 'skipped'
        run: docker rm -f uniswap-v3-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: uniswap-v3-report
          path: uniswap-v3-report.json
    
  uniswap-v4:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'uniswap-v4')
    env:
      PROXY_URL: ${{ inputs.proxy_url }}
      NETWORK: ${{ inputs.network }}
      SOLANA_URL: ${{ inputs.solana_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - name: Launch uniswap v4 tests
        id: uniswap-v4
        timeout-minutes: 20
        env:
          IMAGE: neonlabsorg/uniswap-v4:add-to-ci
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -i -d --name=uniswap-v4-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          docker exec -i -e PROXY_IP=${{ env.PROXY_IP }} uniswap-v4-${{ github.run_number }} \
            bash -c " \
              pytest test_v4_router.py -vvv -s"
          echo "exit_code=$?" >> $GITHUB_ENV
      - name: Delete the uniswap-v4 container
        if: always() && steps.uniswap-v4.result != 'skipped'
        run: docker rm -f uniswap-v4-${{ github.run_number }}
      - name: Check exit code
        if: always() && env.exit_code != 0
        run: |
          echo "Uniswap v4 tests failed"
          exit 1

  saddle:
    runs-on: ubuntu-22.04
    if: contains( inputs.dapps, 'saddle')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 4 -a 10000 -n ${{env.NETWORK}}

      - name: Launch saddle tests
        if: ${{ steps.accounts.outcome == 'success' }}
        id: saddle
        timeout-minutes: 60
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/saddle_tests:latest
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -i -d --name=saddle-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          env_args="-e NEON_PROXY_URL=${{env.PROXY_URL}} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} -e NEON_CHAIN_ID=${{ env.NETWORK_ID }}"
          echo "Run Saddle 2 tokens pool tests"
          docker exec -i $env_args saddle-${{ github.run_number }} npx hardhat run /usr/src/app/scripts/deploy2Tokens.ts
          echo "Run Saddle 3 tokens pool tests"
          docker exec -i $env_args saddle-${{ github.run_number }} npx hardhat run /usr/src/app/scripts/deploy3Tokens.ts
          echo "Run Saddle MetaPool tests"
          docker exec -i $env_args saddle-${{ github.run_number }} npx hardhat run /usr/src/app/scripts/deployMetaPool.ts
          docker cp saddle-${{ github.run_number }}:/usr/src/app/report.json saddle-report.json
      - name: Delete the saddle container
        if: always() && steps.saddle.result != 'skipped'
        run: docker rm -f saddle-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: saddle-report
          path: saddle-report.json
  aave-v2:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'aave-v2')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 5 -a 20000 -n ${{env.NETWORK}}

      - name: Launch aave-v2 tests
        if: ${{ steps.accounts.outcome == 'success' }}
        id: aave-v2
        timeout-minutes: 60
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/aave_tests:latest
        run: |
          docker pull ${{ env.IMAGE }} 
          docker run -i -d --name=aave-v2-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          docker exec -i -e NEON_PROXY_URL=${{env.PROXY_URL}} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} -e NEON_CHAIN_ID=${{ env.NETWORK_ID }} aave-v2-${{ github.run_number }} npm run neonlabs:deploy --network=neonlabs
          docker cp aave-v2-${{ github.run_number }}:/app/report.json aave-v2-report.json
      - name: Delete the aave-v2 container
        if: always() && steps.aave-v2.result != 'skipped'
        run: docker rm -f aave-v2-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: aave-v2-report
          path: aave-v2-report.json
  aave-v3:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'aave-v3')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 12 -a 20000 -n ${{env.NETWORK}}

      - name: Launch aave-v3 tests
        if: ${{ steps.accounts.outcome == 'success' }}
        id: aave-v3
        timeout-minutes: 120
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/aave-v3-core:latest
        run: |
          docker pull ${{ env.IMAGE }} 
          docker run -i -d --name=aave-v3-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          docker exec -i -e NEON_PROXY_URL=${{env.PROXY_URL}} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} -e NEON_CHAIN_ID=${{ env.NETWORK_ID }} aave-v3-${{ github.run_number }} ./run-neon-tests.sh
          docker cp aave-v3-${{ github.run_number }}:/app/aave-v3-core-report.json aave-v3-core-report.json
      - name: Delete the aave-v3 container
        if: always() && steps.aave-v3.result != 'skipped'
        run: docker rm -f aave-v3-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: aave-v3-core-report
          path: aave-v3-core-report.json
  curve:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'curve')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 8 -a 10000 -n ${{env.NETWORK}}

      - name: Launch curve tests
        id: curve
        timeout-minutes: 60
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/curve_tests:latest
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -i -d --name curve-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          test -t 1 && USE_TTY="-t"
          docker exec -i ${USE_TTY} curve-${{ github.run_number }} \
              brownie networks add live neon host="${{ env.PROXY_URL }}" chainid=${{env.NETWORK_ID}}  explorer=https://neonscan.org timeout=60
          docker exec -i ${USE_TTY} -e ACCOUNTS=${{ env.ACCOUNTS }} curve-${{ github.run_number }} \
            bash -c " \
              brownie test \
              -vvvv --network neon"
          docker cp curve-${{ github.run_number }}:/app/curve-report.json curve-report.json
      - name: Delete the curve container
        if: always() && steps.curve.result != 'skipped'
        run: docker rm -f curve-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: curve-report
          path: curve-report.json
  curve-factory:
    runs-on: ubuntu-20.04
    if: false #contains( inputs.dapps, 'curve-factory') # skipped because of NDEV-2905
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Run deployment
        timeout-minutes: 10
        run: |
          python3 -u scripts/curve-deploy.py

      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: curve-factory-report
          path: curve-factory-report.json

  compound:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'compound')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 2 -a 10000 -n ${{env.NETWORK}}

      - name: Launch compound tests
        id: compound
        timeout-minutes: 30
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/compound_tests:latest
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -i -d --name compound-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          test -t 1 && USE_TTY="-t"
          docker exec -i ${USE_TTY} compound-${{ github.run_number }} \
              brownie networks add live neon host="${{ env.PROXY_URL }}" chainid=${{env.NETWORK_ID}} timeout=60
          docker exec -i ${USE_TTY} -e ACCOUNTS=${{ env.ACCOUNTS }} compound-${{ github.run_number }} \
            bash -c " \
              brownie test \
              -vvvv --network neon"
          docker cp compound-${{ github.run_number }}:/app/compound-report.json compound-report.json
      - name: Delete the compound container
        if: always() && steps.compound.result != 'skipped'
        run: docker rm -f compound-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: compound-report
          path: compound-report.json

  robonomics:
    runs-on: ubuntu-22.04
    if: contains( inputs.dapps, 'robonomics')
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 3 -a 10000 -n ${{env.NETWORK}}

      - name: Launch robonomics tests
        if: ${{ steps.accounts.outcome == 'success' }}
        id: robonomics
        timeout-minutes: 60
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/robonomics_tests:latest
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -i -d --entrypoint "sleep" --name=robonomics-${{ github.run_number }} ${{ env.IMAGE }} infinity
          env_args="-e NEON_PROXY_URL=${{env.PROXY_URL}} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} -e NEON_CHAIN_ID=${{ env.NETWORK_ID }}"
          echo "Run Robonomics tests"
          docker exec -i $env_args robonomics-${{ github.run_number }} ./run_tests.sh
          docker exec -i $env_args robonomics-${{ github.run_number }} node create_report.js
          docker exec -i $env_args robonomics-${{ github.run_number }} cat ./reports/report.json > robonomics-report.json
      - name: Delete the robonomics container
        if: always() && steps.robonomics.result != 'skipped'
        run: docker rm -f robonomics-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: robonomics-report
          path: robonomics-report.json
  yearn:
    if: contains( inputs.dapps, 'yearn')
    runs-on: ubuntu-22.04
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 10 -a 10000 -n ${{env.NETWORK}}

      - name: Launch yearn tests
        id: yearn
        timeout-minutes: 60
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/yearn_tests:latest
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -i -d --name yearn-${{ github.run_number }} ${{ env.IMAGE }} /bin/bash
          docker exec -i -e ACCOUNTS=${{ env.ACCOUNTS }} yearn-${{ github.run_number }} \
              brownie networks add live neon host="${{ env.PROXY_URL }}" chainid=${{env.NETWORK_ID}} timeout=60
          docker exec -i -e ACCOUNTS=${{ env.ACCOUNTS }} yearn-${{ github.run_number }} \
            bash -c " \
              brownie test \
                tests/functional -m ci \
              -vvvv --network neon"
          docker cp yearn-${{ github.run_number }}:/app/report.json yearn-report.json
      - name: Delete the yearn container
        if: always() && steps.yearn.result != 'skipped'
        run: docker rm -f yearn-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: yearn-report
          path: yearn-report.json

  pancake:
    runs-on: ubuntu-20.04
    if: contains( inputs.dapps, 'pancake')
    env:
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      FAUCET_URL: ${{ inputs.faucet_url }}
      NETWORK_ID: ${{ inputs.network_id }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        run: |
          python3 ./clickfile.py infra gen-accounts -c 8 -a 10000 -n ${{env.NETWORK}}

      - name: Launch Pancake tests
        if: ${{ steps.accounts.outcome == 'success'}}
        id: pancake
        timeout-minutes: 60
        env:
          ACCOUNTS: ${{ env.ACCOUNTS }}
          IMAGE: ${{ github.repository_owner }}/pancake:latest
        run: |
          test -t 1 && USE_TTY="-t"
          docker pull ${{ env.IMAGE }}
          docker run -i ${USE_TTY} --name=pancake-${{ github.run_number }} \
            -e NEON_PROXY_URL=${{ env.PROXY_URL }} \
            -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} \
            -e NEON_CHAIN_ID=${{ env.NETWORK_ID }} \
            ${{ env.IMAGE }}
          docker cp pancake-${{ github.run_number }}:/usr/src/app/report.json pancake-report.json
      - name: Delete the pancake container
        if: always() && steps.pancake.result != 'skipped'
        run: docker rm -f pancake-${{ github.run_number }}
      - name: Save report
        uses: actions/upload-artifact@v4
        with:
          name: pancake-report
          path: pancake-report.json

  swap-report:
    runs-on: ubuntu-20.04
    needs: [uniswap-v2, uniswap-v3, uniswap-v4, saddle, aave-v2, aave-v3, curve, robonomics, yearn, compound, curve-factory, pancake]
    if: always()
    env:
      SOLANA_URL: ${{ inputs.solana_url }}
      PROXY_URL: ${{ inputs.proxy_url }}
      NETWORK_ID: ${{ inputs.network_id }}
      NETWORK: ${{ inputs.network }}
      SOLANA_IP: ${{ inputs.solana_ip }}
      PROXY_IP: ${{ inputs.proxy_ip }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.external_call }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/neon-tests
          ref: develop
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: uniswap-v2-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: uniswap-v3-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: saddle-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: yearn-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: aave-v2-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: aave-v3-core-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: compound-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: curve-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: curve-factory-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: robonomics-report
          path: reports/
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: pancake-report
          path: reports/
      - name: "Save Cost Report to DB"
        id: save-cost-report-to-db
        if: ${{ inputs.repo == 'evm' || inputs.repo == 'proxy' }}
        run: |
          python3 ./clickfile.py dapps save_dapps_cost_report_to_db \
          --directory=reports \
          --repo="${{inputs.repo}}" \
          --evm_tag="${{inputs.evm_tag}}" \
          --proxy_tag="${{inputs.proxy_tag}}" \
          --evm_commit_sha="${{ inputs.evm_sha_tag }}" \
          --proxy_commit_sha="${{ inputs.proxy_sha_tag }}"
      - name: "Define if reports should be compared and set to outputs.compare"
        id: set-do-compare-reports
        run: |
          if [[ 
              ('${{ inputs.repo }}' == 'proxy' && '${{ inputs.proxy_tag }}' != 'latest' && ! '${{ inputs.proxy_tag }}' =~ ^[vt][0-9]+\.[0-9]+\.x$) || 
              ('${{ inputs.repo }}' == 'evm' && '${{ inputs.evm_tag }}' != 'latest' && ! '${{ inputs.evm_tag }}' =~ ^[vt][0-9]+\.[0-9]+\.x$)
            ]]; then
            echo "compare=true" >> "$GITHUB_OUTPUT"
          else
            echo "compare=false" >> "$GITHUB_OUTPUT"
          fi
      - name: "Compare Cost Reports and save to cost_reports.pdf"
        id: compare-cost-reports
        if: ${{ steps.set-do-compare-reports.outputs.compare == 'true' && steps.save-cost-report-to-db.outcome == 'success' }}
        run: |
          python3 ./clickfile.py dapps compare_dapp_cost_reports \
          	--repo "${{inputs.repo}}" \
            --evm_tag="${{inputs.evm_tag}}" \
            --proxy_tag="${{inputs.proxy_tag}}" \
          	--version_branch "${{ inputs.repo == 'evm' && inputs.evm_pr_version_branch || inputs.proxy_pr_version_branch }}" \
          	--history_depth_limit 10
      - name: "Upload cost_reports.pdf to artifacts"
        id: upload-cost-report-pdf
        if: ${{ steps.compare-cost-reports.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: cost_reports
          path: cost_reports.pdf
      - name: "Get the cost_reports.zip download url and save it to cost_reports.md"
        if: ${{ steps.upload-cost-report-pdf.outcome == 'success' }}
        id: save-cost-reports-zip-url
        env:
          GITHUB_TOKEN: ${{ secrets.GHTOKEN }}
        run: |
          ARTIFACT_NAME="cost_reports"
          
          ARTIFACT_INFO=$(gh api -X GET "/repos/${{ github.repository }}/actions/artifacts" | jq -r ".artifacts[] | select(.name==\"${ARTIFACT_NAME}\") | {id: .id, run_id: .workflow_run.id}")
          echo "ARTIFACT_INFO: ${ARTIFACT_INFO}"
          
          ARTIFACT_ID=$(echo "${ARTIFACT_INFO}" | jq -r '.id' | head -n 1)
          echo "ARTIFACT_ID: ${ARTIFACT_ID}"
          
          RUN_ID=$(echo "${ARTIFACT_INFO}" | jq -r '.run_id' | head -n 1)
          echo "RUN_ID: ${RUN_ID}"
          
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${RUN_ID}/artifacts/${ARTIFACT_ID}"
          echo "🔗[Cost report](${ARTIFACT_URL})" > cost_reports.md
      - name: "Save Cost Reports as markdown tables to cost_reports.md if Cost Reports were not compared"
        id: dump-cost-reports-to-markdown
        if: ${{ steps.set-do-compare-reports.outputs.compare == 'false' || steps.save-cost-reports-zip-url.outcome != 'success' }}
        run: |
          python3 ./clickfile.py dapps save_dapps_cost_report_to_md \
          	--directory reports
      - name: "Add cost_reports.zip download link or Cost Reports markdown tables to summary"
        if: ${{ steps.dump-cost-reports-to-markdown.outcome == 'success' || steps.save-cost-reports-zip-url.outcome == 'success'  }}
        run: |
          cat cost_reports.md >> $GITHUB_STEP_SUMMARY
      - name: "Add PR comment"
        if: ${{ inputs.pr_url_for_report != '' }}
        run: |
          python3 ./clickfile.py dapps add_pr_comment \
          --pr_url_for_report="${{ inputs.pr_url_for_report }}" \
          --token="${{ secrets.GHTOKEN }}" \
          --md_file cost_reports.md
